0 <= time <=  1440 (1 day = 1440 minutes)
distance = time
taxi = max 4 customers

look for 2+ customers starting at the same node and that have same destination? 
 => don't exist so no use to do this!

sort customers, don't take randomly
 => type of sort?
    1: close to start, early pickup
    2: far from start, early pickup
    3: close to start, late pickup
    4: far from start, late pickup
    implemented: early pickup as minimum in sort
    
IDEA: distance can be calculated from the start to the customer
 ! distance = time
 => EarlyTimeOfPickup - distance = most early time to depart at start
 use this as sorting basis?
 
when calculated a path and transporting a customer, check at every node if
there is a customer that can be picked up and must go to the same destination?
 => implemented as getCustomersSameDestination/2
 could this be used when calculating a path? for example, if there is a customer
 with same destination on a node and that node is considered for the shortest path,
 why not prefer it to use that path?
 ! don't forget the times of pickup
 
maybe preprocess the edges to a minimum spanning tree? This way, we have an absolute
minimum to get to all the nodes. This will decrease the amount of edges to consider for
calculating the path with Dijkstra

add heuristic to Dijkstra to reduce time of computation
put it in bestCandidate? idea: work with the key-value where key is the heuristic value
heuristic:
    CurrentX, CurrentY, DestinationX, DestinationY
    square(abs(CX-DX)+abs(CY-DY))

time to calculate distance between 1 and 2499 was 27 minutes, 10 seconds without optimalisations
