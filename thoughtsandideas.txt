******************
* FACTS AND INFO *
******************
    * 0 <= time <= 1440 (1 day = 1440 minutes)
    * distance = time
    * taxi = max 4 customers
    * time to calculate distance from 1 to 2499 was 27m10s without optimalisations (after heuristic, reduced to second!)
    * startnode = (24,24) = Node 1224
    * remaining customers (26/12, no deep optimizations): 245
    
********************
* ANOTHER NEW LOOP *
********************
Main loop:
	- get first customerAvailable
	- put in taxi
	- calculate start->customer save in taxipath
	- calculate customerBegin->customerEnd save in dropoffpath
	- loop taxi
	- taxi complete => save the final job
	- reloop
	
Loop taxi:
	- get best customer
	- calculate first customerBegin -> best customerBegin
	- calculate first customerEnd -> best customerEnd
	- if within timecriteria, add best customer to list of customers
	- reloop
	Stop loop when no good customers found
	
    
************************
* NEW MAIN LAYOUT LOOP *
************************
loop:
    increase clock
    get all customers where taxi needs to leave now
    loop over customers:
        is there taxi free? no => end!
        calculate path
        start taxi
    endloop
    get all running taxi's
    loop over running taxi's
        decrease distance to travel between 2 nodes
        if distance = 0
        then change node
            if node = drop node customer
            then drop customer
                calculate path back to depot
                start taxi
            else if node = pick up node customer
            then pick up customer
                calculate path to drop node customer
                start taxi
            else set stuff to go correctly to next node on path
     endloop
endloop
    
********************************************
* IDEAS (noted if it is done, todo or ???) *
********************************************

TODO
send taxis out and try to fill them to the max before sending them on a route to drop off every customer
to implement:
	- when taxi is full, try to find best path to drop everybody off
	- try to find the best 4 customers to pick up first
		- customers with approx. same ETOP-LTOP
criteria for taxi to pick up customers:
	- there is a route between all the customers that taxi can follow within the time constraints

TODO
instead of checking to all the customers if we should go there, why not only 
check the neighbors and possibly wait some time to pick them up?
for example when we drop a customer off on node A with neighbors a, b, c, ...,
check the neighbors for the best next customer (less time to wait) and send the
taxi over there

TODO
preprocessingloop:
	take the most near customer with new taxi
	send taxi to him
	when taxi arrives, pick user up and look what his destination is
	during driving to destination, check if we pass another customer that can be picked up
		criteria: same destination OR follows the same path until C1 is dropped off
	if destination is reached, drop off customer
	if customers still in taxi, continue
	if no customers in taxi and time is not yet close to 1440, restart loop
do this until time gets to close to 1440

TODO 
when calculated a path and transporting a customer, check at every node if
there is a customer that can be picked up and must go to the same destination?
 => implemented as getCustomersSameDestination/2
 could this be used when calculating a path? for example, if there is a customer
 with same destination on a node and that node is considered for the shortest path,
 why not prefer it to use that path?
 ! don't forget the times of pickup
 OTHER POSSIBILITY: when transporting, check neighbors of current node to see if
 there is an user that also can be picked up by making small detour?

TODO? 
maybe preprocess the edges to a minimum spanning tree? This way, we have an absolute
minimum to get to all the nodes. This will decrease the amount of edges to consider for
calculating the path with Dijkstra
 => could be used for further optimalisation but not yet necessary as the calculation
    of the path from parkinglot to customer is done in approx. 7 seconds for ALL customers

IMPOSSIBLE
look for 2+ customers starting at the same node and that have same destination? 
 => don't exist so no use to do this!
 
DONE
when there is no taxi available, customer must wait. is that possible?
 => when looping, why not take all the customers that need to be picked up in given period?
 why simply send taxi every minute when we can send several at the same time to different locations?

DONE
when sending taxi's to customers, keep a list of unassigned customers (the ones
where there is no taxi available). put that list back in the list of customers still
to assign. the list of customers to pick up every "now" should be the customers
where the starttime is exactly now AND the ones not yet received a taxi (and that
it still is within the ETOP-LTOP range)

DONE
sort customers, don't take randomly
 => type of sort?
    1: close to start, early pickup
    2: far from start, early pickup
    3: close to start, late pickup
    4: far from start, late pickup
    implemented: early pickup as minimum in sort
    reimplemented: took time to pickup customer in account (start to customer)

DONE    
distance can be calculated from the start to the customer
 ! distance = time
 => EarlyTimeOfPickup - distance = most early time to depart at start
 use this as sorting basis?
 => implemented getDeparturesForPickupCustomers/1
 use the result to assign each customer to a taxi

DONE
add heuristic to Dijkstra to reduce time of computation
put it in bestCandidate? idea: work with the key-value where key is the heuristic value
heuristic:
    CurrentX, CurrentY, DestinationX, DestinationY
    square(abs(CX-DX)+abs(CY-DY))
